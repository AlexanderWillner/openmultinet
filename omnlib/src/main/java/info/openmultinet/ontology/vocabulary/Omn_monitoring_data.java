/* CVS $Id: $ */
package info.openmultinet.ontology.vocabulary; 
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.ontology.*;
 
/**
 * Vocabulary definitions from file:/Users/robynloughnane/git/omnnew/playground-rspecs-ontology/omnlib/ontologies/omn-monitoring-data.ttl 
 * @author Auto-generated by schemagen on 01 Sep 2015 13:57 
 */
public class Omn_monitoring_data {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    private static OntModel m_model = ModelFactory.createOntologyModel( OntModelSpec.OWL_MEM, null );
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://open-multinet.info/ontology/omn-monitoring-data#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** <p>Determines the data format.</p> */
    public static final ObjectProperty dataFormat = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring-data#dataFormat" );
    
    /** <p>Different data which can be obtained from the measurement. Those Values determine 
     *  the metrics measured and stated in :measuresMetric property</p>
     */
    public static final ObjectProperty hasMeasurementData = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring-data#hasMeasurementData" );
    
    /** <p>Represents the unit of the measurement data</p> */
    public static final ObjectProperty isMeasuredIn = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring-data#isMeasuredIn" );
    
    /** <p>Reprenets a measurement data of a particular metric</p> */
    public static final ObjectProperty isMeasurementDataOf = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring-data#isMeasurementDataOf" );
    
    /** <p>Determines the measure associated with the statistical measurement.</p> */
    public static final ObjectProperty isStatisticalMeasurementOf = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring-data#isStatisticalMeasurementOf" );
    
    /** <p>Value of duration set in advance of the measurement.</p> */
    public static final DatatypeProperty DurationValue = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-data#DurationValue" );
    
    /** <p>IP address of the destination network object.</p> */
    public static final DatatypeProperty hasDestinationIP = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-data#hasDestinationIP" );
    
    /** <p>MAC address of the destination network object.</p> */
    public static final DatatypeProperty hasDestinationMACAddress = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-data#hasDestinationMACAddress" );
    
    /** <p>The value related to a measurement. Should be the property of a MeasurementData 
     *  (or one of its subclasses) instance and other details as unit and datatype 
     *  should be present</p>
     */
    public static final DatatypeProperty hasMeasurementDataValue = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-data#hasMeasurementDataValue" );
    
    /** <p>Unique identifier given for each measurement.</p> */
    public static final DatatypeProperty hasMeasurementID = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-data#hasMeasurementID" );
    
    /** <p>IP address of the source network object.</p> */
    public static final DatatypeProperty hasSourceIP = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-data#hasSourceIP" );
    
    /** <p>MAC address of the source network object.</p> */
    public static final DatatypeProperty hasSourceMACAddress = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-data#hasSourceMACAddress" );
    
    public static final DatatypeProperty hasTimestamp = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-data#hasTimestamp" );
    
    /** <p>Indicate if a monitoring service, a configuration parameter that is considered 
     *  as data is required (True) or not (False).</p>
     */
    public static final DatatypeProperty isRequired = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-data#isRequired" );
    
    /** <p>Represents the binary format of the transfered data.</p> */
    public static final OntClass BinaryFormat = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#BinaryFormat" );
    
    /** <p>Represents the CSV format of the transfered data.</p> */
    public static final OntClass CSVFormat = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#CSVFormat" );
    
    /** <p>Represents configuration parameters used to to setup the monitoring service, 
     *  e.g. duration.</p>
     */
    public static final OntClass ConfigurationParameter = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#ConfigurationParameter" );
    
    /** <p>Represents the format of the transfered data.</p> */
    public static final OntClass DataFormat = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#DataFormat" );
    
    /** <p>IP address of the destination network object.</p> */
    public static final OntClass DestinationIP = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#DestinationIP" );
    
    /** <p>MAC address of the destination network object.</p> */
    public static final OntClass DestinationMACAddress = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#DestinationMACAddress" );
    
    /** <p>Duration set in advance of the measurement or monitoring service.</p> */
    public static final OntClass Duration = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#Duration" );
    
    /** <p>Represents the formatted form of the data file.</p> */
    public static final OntClass FormattedFile = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#FormattedFile" );
    
    /** <p>Represents general information that are not modelled by the other classes.</p> */
    public static final OntClass GeneralInformation = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#GeneralInformation" );
    
    /** <p>Represents the graphics format of the transfered data.</p> */
    public static final OntClass GraphicsFile = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#GraphicsFile" );
    
    /** <p>Represents the JSON format of the transfered data.</p> */
    public static final OntClass JSONFormat = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#JSONFormat" );
    
    /** <p>Represents maximum Value from a statistacal measurement.</p> */
    public static final OntClass MaxMeasurement = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#MaxMeasurement" );
    
    /** <p>Represents mean Value from a statistacal measurement.</p> */
    public static final OntClass MeanMeasurement = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#MeanMeasurement" );
    
    /** <p>Represents individual results of a measured metric.</p> */
    public static final OntClass MeasurementData = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#MeasurementData" );
    
    /** <p>Represents minimum Value from a statistacal measurement.</p> */
    public static final OntClass MinMeasurement = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#MinMeasurement" );
    
    /** <p>Represents information about an entity (machine, path, link) being measured, 
     *  e.g. Location, Name, etc.</p>
     */
    public static final OntClass ResourceInformation = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#ResourceInformation" );
    
    /** <p>Represents data obtained from one simple measurement.</p> */
    public static final OntClass SimpleMeasurement = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#SimpleMeasurement" );
    
    /** <p>IP address of the source network object.</p> */
    public static final OntClass SourceIP = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#SourceIP" );
    
    /** <p>MAC address of the source network object.</p> */
    public static final OntClass SourceMACAddress = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#SourceMACAddress" );
    
    /** <p>Represents the standard deviation of the statistical measurement</p> */
    public static final OntClass StandardDeviationMeasurement = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#StandardDeviationMeasurement" );
    
    /** <p>Represents statistical measurements that can be obtained from the simple measurement 
     *  values.</p>
     */
    public static final OntClass StatisticalMeasurement = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#StatisticalMeasurement" );
    
    /** <p>Represents the text format of the transfered data.</p> */
    public static final OntClass TextFormat = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#TextFormat" );
    
    /** <p>Represents the unformatted form of the data file.</p> */
    public static final OntClass UnformattedFile = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#UnformattedFile" );
    
    /** <p>Represents the variance from a statistacal measurement.</p> */
    public static final OntClass VarMeasurement = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#VarMeasurement" );
    
    /** <p>Represents the XML format of the transfered data.</p> */
    public static final OntClass XMLFormat = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-data#XMLFormat" );
    
    /** <p>OML streams exported by injection points (OML clients) and collected by the 
     *  OML server.</p>
     */
    public static final Individual OMLStream = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-data#OMLStream", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
}
