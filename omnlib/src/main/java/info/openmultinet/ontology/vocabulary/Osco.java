/* CVS $Id: $ */
package info.openmultinet.ontology.vocabulary; 
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.ontology.*;
 
/**
 * Vocabulary definitions from file:/Users/robynloughnane/git/omnnew/playground-rspecs-ontology/omnlib/ontologies/osco.ttl 
 * @author Auto-generated by schemagen on 01 Sep 2015 13:43 
 */
public class Osco {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    private static OntModel m_model = ModelFactory.createOntologyModel( OntModelSpec.OWL_MEM, null );
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://opensdncore.org/ontology/";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    public static final ObjectProperty deployedOn = m_model.createObjectProperty( "http://opensdncore.org/ontology/deployedOn" );
    
    public static final ObjectProperty image = m_model.createObjectProperty( "http://opensdncore.org/ontology/image" );
    
    public static final ObjectProperty location = m_model.createObjectProperty( "http://opensdncore.org/ontology/location" );
    
    public static final ObjectProperty requires = m_model.createObjectProperty( "http://opensdncore.org/ontology/requires" );
    
    public static final ObjectProperty subnet = m_model.createObjectProperty( "http://opensdncore.org/ontology/subnet" );
    
    public static final DatatypeProperty ANNC_AUTO = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/ANNC_AUTO" );
    
    public static final DatatypeProperty ANNC_DISABLED = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/ANNC_DISABLED" );
    
    public static final DatatypeProperty APP_PORT = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/APP_PORT" );
    
    public static final DatatypeProperty COAP_DISABLED = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/COAP_DISABLED" );
    
    public static final DatatypeProperty CONSOLE_PORT_BIND_ONE = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/CONSOLE_PORT_BIND_ONE" );
    
    public static final DatatypeProperty CONSOLE_PORT_BIND_TWO = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/CONSOLE_PORT_BIND_TWO" );
    
    public static final DatatypeProperty CONSOLE_PORT_ONE = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/CONSOLE_PORT_ONE" );
    
    public static final DatatypeProperty CONSOLE_PORT_TWO = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/CONSOLE_PORT_TWO" );
    
    public static final DatatypeProperty DEFAULT_ROUTE_VIA = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/DEFAULT_ROUTE_VIA" );
    
    public static final DatatypeProperty DIAMETER_LISTEN_INTF = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/DIAMETER_LISTEN_INTF" );
    
    public static final DatatypeProperty DIAMETER_PORT = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/DIAMETER_PORT" );
    
    public static final DatatypeProperty DNS_INTF = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/DNS_INTF" );
    
    public static final DatatypeProperty ICSCF_NAME = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/ICSCF_NAME" );
    
    public static final DatatypeProperty ICSCF_PORT = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/ICSCF_PORT" );
    
    public static final DatatypeProperty LOGGING_FILE = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/LOGGING_FILE" );
    
    public static final DatatypeProperty LOGGING_LEVEL = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/LOGGING_LEVEL" );
    
    public static final DatatypeProperty MGMT_INTF = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/MGMT_INTF" );
    
    public static final DatatypeProperty MIN_NUM_INTF = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/MIN_NUM_INTF" );
    
    public static final DatatypeProperty NET_A_INTF = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/NET_A_INTF" );
    
    public static final DatatypeProperty NOTIFY_CHAN_DISABLED = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/NOTIFY_CHAN_DISABLED" );
    
    public static final DatatypeProperty NOTIFY_DISABLED = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/NOTIFY_DISABLED" );
    
    public static final DatatypeProperty PCSCF_NAME = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/PCSCF_NAME" );
    
    public static final DatatypeProperty PCSCF_PORT = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/PCSCF_PORT" );
    
    public static final DatatypeProperty PORT = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/PORT" );
    
    public static final DatatypeProperty REQUIRE_AUTH = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/REQUIRE_AUTH" );
    
    public static final DatatypeProperty RETARGET_DISABLED = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/RETARGET_DISABLED" );
    
    public static final DatatypeProperty SCSCF_NAME = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/SCSCF_NAME" );
    
    public static final DatatypeProperty SCSCF_PORT = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/SCSCF_PORT" );
    
    public static final DatatypeProperty SERVICE_PORT = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/SERVICE_PORT" );
    
    public static final DatatypeProperty SLF_PRESENCE = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/SLF_PRESENCE" );
    
    public static final DatatypeProperty TEST_PARAM = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/TEST_PARAM" );
    
    public static final DatatypeProperty VERSION = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/VERSION" );
    
    public static final DatatypeProperty additionals = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/additionals" );
    
    public static final DatatypeProperty datacenter = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/datacenter" );
    
    public static final DatatypeProperty db_name = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/db-name" );
    
    public static final DatatypeProperty db_provi = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/db-provi" );
    
    public static final DatatypeProperty db_pw = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/db-pw" );
    
    public static final DatatypeProperty db_user = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/db-user" );
    
    public static final DatatypeProperty domain_name = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/domain-name" );
    
    public static final DatatypeProperty domain_ns = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/domain-ns" );
    
    public static final DatatypeProperty fixedIp = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/fixedIp" );
    
    public static final DatatypeProperty flavour = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/flavour" );
    
    public static final DatatypeProperty floatingIp = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/floatingIp" );
    
    public static final DatatypeProperty id = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/id" );
    
    public static final DatatypeProperty key = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/key" );
    
    public static final DatatypeProperty localDB = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/localDB" );
    
    public static final DatatypeProperty maxNumInst = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/maxNumInst" );
    
    public static final DatatypeProperty mgmt = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/mgmt" );
    
    public static final DatatypeProperty minNumInst = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/minNumInst" );
    
    public static final DatatypeProperty name = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/name" );
    
    public static final DatatypeProperty nameserver = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/nameserver" );
    
    public static final DatatypeProperty parameter1 = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/parameter1" );
    
    public static final DatatypeProperty parameter2 = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/parameter2" );
    
    public static final DatatypeProperty port = m_model.createDatatypeProperty( "http://opensdncore.org/ontology/port" );
    
    public static final OntClass Image = m_model.createClass( "http://opensdncore.org/ontology/Image" );
    
    public static final OntClass Location = m_model.createClass( "http://opensdncore.org/ontology/Location" );
    
    public static final OntClass ServiceContainer = m_model.createClass( "http://opensdncore.org/ontology/ServiceContainer" );
    
    public static final OntClass Subnet = m_model.createClass( "http://opensdncore.org/ontology/Subnet" );
    
    public static final OntClass dns = m_model.createClass( "http://opensdncore.org/ontology/dns" );
    
    public static final OntClass dummy = m_model.createClass( "http://opensdncore.org/ontology/dummy" );
    
    public static final OntClass hss = m_model.createClass( "http://opensdncore.org/ontology/hss" );
    
    public static final OntClass icscf = m_model.createClass( "http://opensdncore.org/ontology/icscf" );
    
    public static final OntClass m2m_gateway = m_model.createClass( "http://opensdncore.org/ontology/m2m_gateway" );
    
    public static final OntClass m2m_server = m_model.createClass( "http://opensdncore.org/ontology/m2m_server" );
    
    public static final OntClass pcscf = m_model.createClass( "http://opensdncore.org/ontology/pcscf" );
    
    public static final OntClass scscf = m_model.createClass( "http://opensdncore.org/ontology/scscf" );
    
    public static final OntClass ssh = m_model.createClass( "http://opensdncore.org/ontology/ssh" );
    
    public static final Individual ACTIVE = m_model.createIndividual( "http://opensdncore.org/ontology/ACTIVE", m_model.createClass( "http://open-multinet.info/ontology/omn-lifecycle#State" ) );
    
    public static final Individual CLEANED = m_model.createIndividual( "http://opensdncore.org/ontology/CLEANED", m_model.createClass( "http://open-multinet.info/ontology/omn-lifecycle#State" ) );
    
    public static final Individual ERROR = m_model.createIndividual( "http://opensdncore.org/ontology/ERROR", m_model.createClass( "http://open-multinet.info/ontology/omn-lifecycle#State" ) );
    
    public static final Individual INITIALIZED = m_model.createIndividual( "http://opensdncore.org/ontology/INITIALIZED", m_model.createClass( "http://open-multinet.info/ontology/omn-lifecycle#State" ) );
    
    public static final Individual INSTALLED = m_model.createIndividual( "http://opensdncore.org/ontology/INSTALLED", m_model.createClass( "http://open-multinet.info/ontology/omn-lifecycle#State" ) );
    
    public static final Individual NOTYETINITIALIZED = m_model.createIndividual( "http://opensdncore.org/ontology/NOTYETINITIALIZED", m_model.createClass( "http://open-multinet.info/ontology/omn-lifecycle#State" ) );
    
    public static final Individual PENDING = m_model.createIndividual( "http://opensdncore.org/ontology/PENDING", m_model.createClass( "http://open-multinet.info/ontology/omn-lifecycle#State" ) );
    
    public static final Individual PREINIT = m_model.createIndividual( "http://opensdncore.org/ontology/PREINIT", m_model.createClass( "http://open-multinet.info/ontology/omn-lifecycle#State" ) );
    
    public static final Individual READY = m_model.createIndividual( "http://opensdncore.org/ontology/READY", m_model.createClass( "http://open-multinet.info/ontology/omn-lifecycle#State" ) );
    
    public static final Individual REMOVING = m_model.createIndividual( "http://opensdncore.org/ontology/REMOVING", m_model.createClass( "http://open-multinet.info/ontology/omn-lifecycle#State" ) );
    
    public static final Individual STARTED = m_model.createIndividual( "http://opensdncore.org/ontology/STARTED", m_model.createClass( "http://open-multinet.info/ontology/omn-lifecycle#State" ) );
    
    public static final Individual STOPPED = m_model.createIndividual( "http://opensdncore.org/ontology/STOPPED", m_model.createClass( "http://open-multinet.info/ontology/omn-lifecycle#State" ) );
    
    public static final Individual UNCOMPLETED = m_model.createIndividual( "http://opensdncore.org/ontology/UNCOMPLETED", m_model.createClass( "http://open-multinet.info/ontology/omn-lifecycle#State" ) );
    
    public static final Individual UPDATING = m_model.createIndividual( "http://opensdncore.org/ontology/UPDATING", m_model.createClass( "http://open-multinet.info/ontology/omn-lifecycle#State" ) );
    
}
