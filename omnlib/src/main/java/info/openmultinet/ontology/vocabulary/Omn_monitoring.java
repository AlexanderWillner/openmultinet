/* CVS $Id: $ */
package info.openmultinet.ontology.vocabulary; 
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.ontology.*;
 
/**
 * Vocabulary definitions from file:/Users/robynloughnane/git/omnnew/playground-rspecs-ontology/omnlib/ontologies/omn-monitoring.ttl 
 * @author Auto-generated by schemagen on 01 Sep 2015 13:43 
 */
public class Omn_monitoring {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    private static OntModel m_model = ModelFactory.createOntologyModel( OntModelSpec.OWL_MEM, null );
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://open-multinet.info/ontology/omn-monitoring#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    public static final ObjectProperty hasLifetime = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#hasLifetime" );
    
    public static final ObjectProperty hasMeasurementMetric = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#hasMeasurementMetric" );
    
    public static final ObjectProperty hasMetricAttribute = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#hasMetricAttribute" );
    
    public static final ObjectProperty hasUnit = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#hasUnit" );
    
    /** <p>Is a measurement metric of any observed object, e.g. resource, component or 
     *  service</p>
     */
    public static final ObjectProperty isMeasurementMetricOf = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#isMeasurementMetricOf" );
    
    /** <p>Defines the relation between a measurement and a metric</p> */
    public static final ObjectProperty isMeasurementOf = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#isMeasurementOf" );
    
    public static final ObjectProperty measuredBy = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#measuredBy" );
    
    public static final ObjectProperty measuresMetric = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#measuresMetric" );
    
    public static final ObjectProperty monitors = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#monitors" );
    
    public static final ObjectProperty pushedBy = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#pushedBy" );
    
    public static final ObjectProperty pushesDataTo = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#pushesDataTo" );
    
    public static final ObjectProperty retrievedBy = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#retrievedBy" );
    
    public static final ObjectProperty retrievedFrom = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#retrievedFrom" );
    
    public static final ObjectProperty sendTo = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#sendTo" );
    
    public static final ObjectProperty sentBy = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#sentBy" );
    
    public static final ObjectProperty sentFrom = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring#sentFrom" );
    
    public static final DatatypeProperty elapsedTimeAtClientSinceExperimentStartedInSeconds = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring#elapsedTimeAtClientSinceExperimentStartedInSeconds" );
    
    public static final DatatypeProperty elapsedTimeAtServerSinceExperimentStartedInSeconds = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring#elapsedTimeAtServerSinceExperimentStartedInSeconds" );
    
    public static final DatatypeProperty endTime = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring#endTime" );
    
    /** <p>Indicate if a service is provided (offered to be requested by users).</p> */
    public static final DatatypeProperty isOffered = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring#isOffered" );
    
    /** <p>Indicate if a service is requested (True) or not (False).</p> */
    public static final DatatypeProperty isRequested = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring#isRequested" );
    
    /** <p>Determines the password.</p> */
    public static final DatatypeProperty requiresPassword = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring#requiresPassword" );
    
    /** <p>Determines the username.</p> */
    public static final DatatypeProperty requiresUsername = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring#requiresUsername" );
    
    public static final DatatypeProperty startTime = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring#startTime" );
    
    /** <p>Represents the active method of performing measurements, e.g. ping, tracerout, 
     *  iperf.</p>
     */
    public static final OntClass ActiveMeasurement = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring#ActiveMeasurement" );
    
    /** <p>Data represents measurement data as well as other monitoring related information.</p> */
    public static final OntClass Data = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring#Data" );
    
    /** <p>Provides first level support monitoring information about the health and status 
     *  of infrastructures. And the overall status of an infrastructure can be shown 
     *  in one of three RAG (R:Red 'if down', A:Amber 'if in risk or some components 
     *  are down' or G:Green 'if OK') status.</p>
     */
    public static final OntClass FirstLevelSupport = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring#FirstLevelSupport" );
    
    /** <p>Rrepresents the monitoring service that gives high level monitoring information 
     *  about the health and the status of an ICT infrastructure.</p>
     */
    public static final OntClass InfrastructureHealthMonitoring = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring#InfrastructureHealthMonitoring" );
    
    /** <p>Rrepresents the monitoring service that gives detailed monitoring information 
     *  about the used resources and services at an ICT infrastructure.</p>
     */
    public static final OntClass InfrastructureResourceMonitoring = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring#InfrastructureResourceMonitoring" );
    
    /** <p>Represents lifetime of any process (e.g. monitoring service or measurement).</p> */
    public static final OntClass Lifetime = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring#Lifetime" );
    
    /** <p>Represents a measurement which is a systematic, replicable process by which 
     *  measurement metrics are quantified.</p>
     */
    public static final OntClass Measurement = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring#Measurement" );
    
    /** <p>Metric is anything that can be measured, such as CPU load of a machine, packet 
     *  loss in a channel, etc.</p>
     */
    public static final OntClass Metric = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring#Metric" );
    
    /** <p>Rrepresents any monitoring service offered.</p> */
    public static final OntClass MonitoringService = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring#MonitoringService" );
    
    /** <p>Represents the passive method of performing measurements, e.g. pcap, wireshark.</p> */
    public static final OntClass PassiveMeasurement = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring#PassiveMeasurement" );
    
    /** <p>Rrepresents the Service Level Agreement (SLA) monitoring service that gives 
     *  detailed monitoring information about pre-defined metrics to observe the SLAs 
     *  whether they are met or violated.</p>
     */
    public static final OntClass SLAMonitoring = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring#SLAMonitoring" );
    
    /** <p>Tool represents tools used for performing measurements and monitoring such 
     *  as measurement probes, data collectors, visualizer, etc.</p>
     */
    public static final OntClass Tool = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring#Tool" );
    
    /** <p>Unit represents the unit of the measurement and monitoring data such as Bytes, 
     *  Bitspersecond, etc.</p>
     */
    public static final OntClass Unit = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring#Unit" );
    
}
