/* CVS $Id: $ */
package info.openmultinet.ontology.vocabulary; 
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.ontology.*;
 
/**
 * Vocabulary definitions from file:/Users/robynloughnane/git/omnnew/playground-rspecs-ontology/omnlib/ontologies/omn-monitoring-metric.ttl 
 * @author Auto-generated by schemagen on 01 Sep 2015 13:57 
 */
public class Omn_monitoring_metric {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    private static OntModel m_model = ModelFactory.createOntologyModel( OntModelSpec.OWL_MEM, null );
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://open-multinet.info/ontology/omn-monitoring-metric#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    public static final ObjectProperty canBeCalculatedFrom = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring-metric#canBeCalculatedFrom" );
    
    /** <p>Presents the updating rate of the measurements, e.g. if the frequency is set 
     *  to 30 second, i.e. a new measure is provided every 30 second.</p>
     */
    public static final DatatypeProperty hasFrequency = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-metric#hasFrequency" );
    
    /** <p>Presents the status value either on or off</p> */
    public static final DatatypeProperty statusValue = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-metric#statusValue" );
    
    public static final OntClass AllocatedBandwidth = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#AllocatedBandwidth" );
    
    public static final OntClass AllocatedCPU = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#AllocatedCPU" );
    
    /** <p>In the case of physical resources, this is the same as total memory, but represents 
     *  different concept in the case of virtual resources.</p>
     */
    public static final OntClass AllocatedMemory = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#AllocatedMemory" );
    
    /** <p>Represents resource availability status, 1=available, 0=not, 2=anything else 
     *  (in Maintenance).</p>
     */
    public static final OntClass Availability = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#Availability" );
    
    /** <p>Bandwidth that is not used.</p> */
    public static final OntClass AvailableBandwidth = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#AvailableBandwidth" );
    
    /** <p>Represents the available memory that can be used by the system (programs).</p> */
    public static final OntClass AvailableMemory = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#AvailableMemory" );
    
    public static final OntClass BandwidthUtilization = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#BandwidthUtilization" );
    
    /** <p>Represents the battery capacity, e.g. in mWh.</p> */
    public static final OntClass BatteryCapacity = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#BatteryCapacity" );
    
    /** <p>Represents the battery life time of a given device such as GPS, sensor, WiFi 
     *  smartphone, e.g in second.</p>
     */
    public static final OntClass BatteryLifetime = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#BatteryLifetime" );
    
    public static final OntClass BuffersMemory = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#BuffersMemory" );
    
    /** <p>Time in which the CPU is idle AND there is at least one I/O in progress.</p> */
    public static final OntClass CPUIOwait = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#CPUIOwait" );
    
    public static final OntClass CPULoad = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#CPULoad" );
    
    public static final OntClass CPUUtilization = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#CPUUtilization" );
    
    /** <p>Time spent idle.</p> */
    public static final OntClass CPUidle = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#CPUidle" );
    
    public static final OntClass CPUnice = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#CPUnice" );
    
    /** <p>Time spent running kernel code.</p> */
    public static final OntClass CPUsystem = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#CPUsystem" );
    
    /** <p>Time spent non-kernel code.</p> */
    public static final OntClass CPUuser = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#CPUuser" );
    
    public static final OntClass CachedMemory = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#CachedMemory" );
    
    public static final OntClass Capacity = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#Capacity" );
    
    /** <p>Represents any counter such as no. of virtual resources running on a physical 
     *  one (e.g. VMs), processes, CPU cores, users, hops etc. .</p>
     */
    public static final OntClass Counter = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#Counter" );
    
    public static final OntClass Delay = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#Delay" );
    
    /** <p>Represents jitter.</p> */
    public static final OntClass DelayVariation = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#DelayVariation" );
    
    /** <p>Represents number of read/write input/output operations executed per second.</p> */
    public static final OntClass DiskIOPs = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#DiskIOPs" );
    
    /** <p>Represents amount of input/output data being read and/or written over time 
     *  in bytes/s.</p>
     */
    public static final OntClass DiskIORate = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#DiskIORate" );
    
    /** <p>Represents amount of input/output data being read over time in bytes/s.</p> */
    public static final OntClass DiskIORead = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#DiskIORead" );
    
    /** <p>Represents amount of input/output data being written over time in bytes/s.</p> */
    public static final OntClass DiskIOWrite = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#DiskIOWrite" );
    
    public static final OntClass DiskQueueLength = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#DiskQueueLength" );
    
    public static final OntClass DiskUtilization = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#DiskUtilization" );
    
    /** <p>Gives distance error of any device such as GPS, sensor, etc.</p> */
    public static final OntClass DistanceError = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#DistanceError" );
    
    public static final OntClass DownTime = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#DownTime" );
    
    public static final OntClass ErrorRate = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#ErrorRate" );
    
    public static final OntClass FailureRate = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#FailureRate" );
    
    public static final OntClass FreeDiskSpace = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#FreeDiskSpace" );
    
    public static final OntClass FreeMemory = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#FreeMemory" );
    
    public static final OntClass FreeSwap = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#FreeSwap" );
    
    public static final OntClass InterferenceLevel = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#InterferenceLevel" );
    
    /** <p>Maximum throughput that a flow can get without any cross traffic. The link 
     *  with the minimum transmission rate determines the capacity of the path, while 
     *  the link with the minimum unused capacity limits the available bandwidth [C. 
     *  Dovrolis, et al., What do packet dispersion techniques measure?].</p>
     */
    public static final OntClass LinkCapacity = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#LinkCapacity" );
    
    public static final OntClass MemoryUtilization = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#MemoryUtilization" );
    
    public static final OntClass NoiseLevel = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#NoiseLevel" );
    
    public static final OntClass OneWayDelay = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#OneWayDelay" );
    
    public static final OntClass PacketArrivalRate = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#PacketArrivalRate" );
    
    public static final OntClass PacketLoss = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#PacketLoss" );
    
    /** <p>The path capacity of a determinate protocol is the smallest link capacity 
     *  of the links that make up the path. The link capacity C(L,T,I) is the maximum 
     *  number of bits of a determinate protocol that can be transmitted from the 
     *  source and correctly received by the destination over the link L during the 
     *  interval [T, T+I], divided by I.</p>
     */
    public static final OntClass PathCapacity = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#PathCapacity" );
    
    /** <p>Represents the power consumed in a specific time period, e.g. consumed power 
     *  by GPS, sensor, WiFi smartphone.</p>
     */
    public static final OntClass PowerConsumption = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#PowerConsumption" );
    
    public static final OntClass ProcessingTime = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#ProcessingTime" );
    
    /** <p>Represents received signal strength indicator (RSSI) level.</p> */
    public static final OntClass RSSILevel = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#RSSILevel" );
    
    /** <p>Represents radio signal quality of any interface or channel.</p> */
    public static final OntClass RadioSignalQuality = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#RadioSignalQuality" );
    
    /** <p>Gives the geographical position of a device such as sensor, mobile node, etc.</p> */
    public static final OntClass ResourcePosition = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#ResourcePosition" );
    
    public static final OntClass ResponseTime = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#ResponseTime" );
    
    public static final OntClass RoundTripDelay = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#RoundTripDelay" );
    
    /** <p>Represents Signal-to-Interference plus Noise Ratio.</p> */
    public static final OntClass SINR = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#SINR" );
    
    /** <p>Represents Signal-to-Interference Ratio.</p> */
    public static final OntClass SIR = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#SIR" );
    
    /** <p>Represents Signal-to-Noise plus Interference Ratio.</p> */
    public static final OntClass SNIR = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#SNIR" );
    
    /** <p>Represents Signal-to-Noise Ratio.</p> */
    public static final OntClass SNR = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#SNR" );
    
    public static final OntClass SharedMemory = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#SharedMemory" );
    
    public static final OntClass SpectralIntegrity = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#SpectralIntegrity" );
    
    /** <p>Represents statistic information per IP connection, interface (packets, bytes) 
     *  per time slot, or flow, etc.</p>
     */
    public static final OntClass Statistics = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#Statistics" );
    
    /** <p>Represents the status of a thing weather its ON or OFF. This thing can be 
     *  virtual or physical resource, interface, port, PowerMode, etc. It is to be 
     *  noticed that the status is different than the Availability metric</p>
     */
    public static final OntClass Status = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#Status" );
    
    public static final OntClass StorageCapacity = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#StorageCapacity" );
    
    public static final OntClass Temperature = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#Temperature" );
    
    /** <p>Average rate of successful amount of data delivered over a communication channel 
     *  in a given time interval. E.g. number of (bytes, packets, and flows) per time 
     *  slot.</p>
     */
    public static final OntClass Throughput = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#Throughput" );
    
    public static final OntClass TimeToRepair = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#TimeToRepair" );
    
    public static final OntClass TotalMemory = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#TotalMemory" );
    
    public static final OntClass TotalSwap = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#TotalSwap" );
    
    public static final OntClass UsedBandwidth = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#UsedBandwidth" );
    
    public static final OntClass UsedDiskSpace = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#UsedDiskSpace" );
    
    /** <p>Represents the available momory that is unused by the system (programs).</p> */
    public static final OntClass UsedMemory = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#UsedMemory" );
    
    public static final OntClass UsedSwap = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-metric#UsedSwap" );
    
}
