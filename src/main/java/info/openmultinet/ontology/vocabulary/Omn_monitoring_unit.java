/* CVS $Id: $ */
package info.openmultinet.ontology.vocabulary; 
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.ontology.*;
 
/**
 * Vocabulary definitions from file:/Users/robynloughnane/git/omnnew/playground-rspecs-ontology/omnlib/ontologies/omn-monitoring-unit.ttl 
 * @author Auto-generated by schemagen on 01 Sep 2015 12:45 
 */
public class Omn_monitoring_unit {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    private static OntModel m_model = ModelFactory.createOntologyModel( OntModelSpec.OWL_MEM, null );
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://open-multinet.info/ontology/omn-monitoring-unit#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    public static final ObjectProperty defaultUnit = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring-unit#defaultUnit" );
    
    public static final ObjectProperty derivedFrom = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring-unit#derivedFrom" );
    
    public static final ObjectProperty hasPrefix = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring-unit#hasPrefix" );
    
    public static final ObjectProperty possiblePrefix = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn-monitoring-unit#possiblePrefix" );
    
    public static final DatatypeProperty base = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-unit#base" );
    
    public static final DatatypeProperty exponent = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-unit#exponent" );
    
    public static final DatatypeProperty forwardExpression = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-unit#forwardExpression" );
    
    public static final DatatypeProperty hasValue = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-unit#hasValue" );
    
    public static final DatatypeProperty inverseExpression = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-unit#inverseExpression" );
    
    public static final DatatypeProperty offset = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-unit#offset" );
    
    /** <p>An abstraction of any arbitrary function that can be expressed by regular 
     *  expressions. The format can be of the following two forms: I. /evalInteger/expresion/operation/ 
     *  II. /evalIntegerAsString/expression/operation/separator/[...], where [...] 
     *  stands for a series of operation/separator/ with n repetition. "expression": 
     *  is a regular expression, which contains grouping eclosed by parenthesis, like 
     *  "([0-9]*)". These groups are referenced by "&lt;?&gt;" within the operation 
     *  field, where question mark represents the sequence number of the group referenced, 
     *  starting with 1. "operation": is a mathematical form that may contain operations 
     *  understood by eval method. For instance: "+, -, *, /, &gt;&gt;", etc. "separator": 
     *  is the piece of string to be appended to the result of an evaluation, which 
     *  is already transformed a string. An example: Given a function that maps: {apple1 
     *  |-&gt; 10, apple2 |-&gt; 20, ...} can be expressed as follows: /evalInteger/alma([0-9]*)/10*(&lt;1&gt;)/ 
     *  Another example: Given a function that maps: { 11 |-&gt; 1d2u, 32 |-&gt; 3d4u, 
     *  ...} can be expressed as follows: /evalIntegerAsString/([0-9])([0-9])/(&lt;1&gt;)/d/2*(&lt;2&gt;)/u/</p>
     */
    public static final DatatypeProperty regexp = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-unit#regexp" );
    
    public static final DatatypeProperty scale = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-unit#scale" );
    
    public static final DatatypeProperty symbol = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn-monitoring-unit#symbol" );
    
    public static final OntClass BaseDimension = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#BaseDimension" );
    
    /** <p>Base units are the simplest unit forms, independent of each other, and they 
     *  are the profound building blocks for derived units.</p>
     */
    public static final OntClass BaseUnit = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#BaseUnit" );
    
    /** <p>In computing, a binary prefix is a specifier or mnemonic that is prepended 
     *  to the units of digital information, the bit and the byte, to indicate multiplication 
     *  by a power of 2. In practice the powers used are multiples of 10, so the prefixes 
     *  denote powers of 1024 = 2^10. Starting in about 1998, a number of standards 
     *  and trade organizations approved standards and recommendations for a new set 
     *  of binary prefixes, proposed earlier by the International Electrotechnical 
     *  Commission (IEC), that would refer unambiguously to powers of 1024. According 
     *  to these, the SI prefixes would only be used in the decimal sense, even when 
     *  referring to data storage capacities: kilobyte and megabyte would denote one 
     *  thousand bytes and one million bytes respectively (consistent with SI), while 
     *  new terms such as kibibyte, mebibyte and gibibyte, abbreviated KiB, MiB, and 
     *  GiB, would denote 1024 bytes, 1048576 bytes, and 1073741824 bytes respectively.</p>
     */
    public static final OntClass BinaryPrefix = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#BinaryPrefix" );
    
    public static final OntClass Cardinal = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#Cardinal" );
    
    public static final OntClass Countable = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#Countable" );
    
    /** <p>A prefix that precedes a basic unit of measure to indicate a decadic multiple 
     *  or fraction of the unit. The prefix kilo-, for example, may be added to gram 
     *  to indicate multiplication by one thousand; one kilogram is equal to one thousand 
     *  grams (1 km = 1000 m). The prefix centi-, likewise, may be added to metre 
     *  to indicate division by one hundred; one centimetre is equal to one hundredth 
     *  of a metre (1 cm = 0.01 m).</p>
     */
    public static final OntClass DecimalPrefix = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#DecimalPrefix" );
    
    public static final OntClass DerivedDimension = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#DerivedDimension" );
    
    public static final OntClass DifferenceDimension = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#DifferenceDimension" );
    
    /** <p>Numbers are meaningless for the physicist without the correct use of units. 
     *  It makes no sense to say "the distance from my house to school is two", unless 
     *  we follow that statement with "miles" or "kilometers", or whichever unit makes 
     *  the statement true. We will distinguish between dimension, the abstract quality 
     *  of a measurement without scale (ie., length), and unit, the quality of a number 
     *  which specifies a previously agreed upon scale (ie., meters). While dimensional 
     *  arguments are of primary importance in understanding the qualitative behavior 
     *  of systems, the use of units are necessary for the predictions we seek.</p>
     */
    public static final OntClass Dimension = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#Dimension" );
    
    public static final OntClass Frequency = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#Frequency" );
    
    public static final OntClass GeoPosition = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#GeoPosition" );
    
    public static final OntClass IPAddress = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#IPAddress" );
    
    public static final OntClass InformationLossRatio = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#InformationLossRatio" );
    
    public static final OntClass InformationRate = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#InformationRate" );
    
    public static final OntClass InformationSize = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#InformationSize" );
    
    /** <p>Quantitative attributes are all measurable on interval scales, as any difference 
     *  between the levels of an attribute can be multiplied by any real number to 
     *  exceed or equal another difference. A highly familiar example of interval 
     *  scale measurement is temperature with the Celsius scale. In this particular 
     *  scale, the unit of measurement is 1/100 of the temperature difference between 
     *  the freezing and boiling points of water under a pressure of 1 atmosphere. 
     *  The "zero point" on an interval scale is arbitrary; and negative values can 
     *  be used. The formal mathematical term is an affine space (in this case an 
     *  affine line). Variables measured at the interval level are called "interval 
     *  variables" or sometimes "scaled variables" as they have units of measurement. 
     *  Ratios between numbers on the scale are not meaningful, so operations such 
     *  as multiplication and division cannot be carried out directly. But ratios 
     *  of differences can be expressed; for example, one difference can be twice 
     *  another. The central tendency of a variable measured at the interval level 
     *  can be represented by its mode, its median, or its arithmetic mean. Statistical 
     *  dispersion can be measured in most of the usual ways, which just involved 
     *  differences or averaging, such as range, interquartile range, and standard 
     *  deviation. Since one cannot divide, one cannot define measures that require 
     *  a ratio, such as studentized range or coefficient of variation. More subtly, 
     *  while one can define moments about the origin, only central moments are useful, 
     *  since the choice of origin is arbitrary and not meaningful. One can define 
     *  standardized moments, since ratios of differences are meaningful, but one 
     *  cannot define coefficient of variation, since the mean is a moment about the 
     *  origin, unlike the standard deviation, which is (the square root of) a central 
     *  moment.</p>
     */
    public static final OntClass IntervalLevel = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#IntervalLevel" );
    
    /** <p>LTU = scale * U + offset, where LTU stands for the linear transformed unit 
     *  derived from U.</p>
     */
    public static final OntClass LinearTransformedUnit = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#LinearTransformedUnit" );
    
    /** <p>The "levels of measurement" or scales of measure are expressions that typically 
     *  refer to the theory of scale types developed by the psychologist Stanley Smith 
     *  Stevens. Stevens proposed his theory in a 1946 Science article titled "On 
     *  the theory of scales of measurement". In that article, Stevens claimed that 
     *  all measurement in science was conducted using four different types of scales 
     *  that he called "nominal", "ordinal", "interval" and "ratio".</p>
     */
    public static final OntClass MeasurementLevel = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#MeasurementLevel" );
    
    /** <p>N-ary units are derived from more than one unit.</p> */
    public static final OntClass N_aryUnit = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#N_aryUnit" );
    
    public static final OntClass NameOfSomething = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#NameOfSomething" );
    
    /** <p>At the nominal scale, i.e., for a nominal category, one uses labels; for example, 
     *  rocks can be generally categorized as igneous, sedimentary and metamorphic. 
     *  For this scale, some valid operations are equivalence and set membership. 
     *  Nominal measures offer names or labels for certain characteristics. Variables 
     *  assessed on a nominal scale are called categorical variables. We can use a 
     *  simple example of a nominal category: the destination port of an IP packet 
     *  captured. For instance, looking at the destination port values we might find 
     *  one or more of IP packets with a value 7777. In this scenario 7777 is their 
     *  label. We can only check whether two packets' destination ports have the same 
     *  label (equivalence) or whether a given label is in on a certain list of labels 
     *  (set membership), but it is impossible to say which label is greater or less 
     *  than another (comparison) or to measure the difference between two labels. 
     *  Given a set of destination port numbers, we can describe the set by its most 
     *  common label (the mode), but cannot provide an "average label" or even the 
     *  "middle label" among all the names. However, if we decide to sort our labels 
     *  numerically (or to sort them by how many times they appear in a measurement 
     *  log), we will begin to turn this nominal scale into an ordinal scale.</p>
     */
    public static final OntClass NominalLevel = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#NominalLevel" );
    
    /** <p>Rank-ordering data simply puts the data on an ordinal scale. Ordinal measurements 
     *  describe order, but not relative size or degree of difference between the 
     *  items measured. In this scale type, the numbers assigned to objects or events 
     *  represent the rank order (1st, 2nd, 3rd, etc.) of the entities assessed. An 
     *  example of an ordinal scale is the result of a horse race, which says only 
     *  which horses arrived first, second, or third but include no information about 
     *  race times. When using an ordinal scale, the central tendency of a group of 
     *  items can be described by using the group's mode (or most common item) or 
     *  its median (the middle-ranked item), but the mean (or average) cannot be defined. 
     *  Thus it is an error to write that an IQ of 160 is just as different from an 
     *  IQ of 130 as an IQ of 100 is different from an IQ of 70.</p>
     */
    public static final OntClass OrdinalLevel = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#OrdinalLevel" );
    
    public static final OntClass PointInTime = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#PointInTime" );
    
    public static final OntClass PowerDimension = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#PowerDimension" );
    
    /** <p>PU = U^exponent, where PU power unit is derived from U unit.</p> */
    public static final OntClass PowerUnit = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#PowerUnit" );
    
    /** <p>A metric prefix or SI prefix is a unit prefix that precedes a basic unit of 
     *  measure to indicate a decadic multiple or fraction or or binary multiple of 
     *  the unit. Each prefix has a unique symbol that is prepended to the unit symbol. 
     *  The use of multiple prefixes are disallowed.</p>
     */
    public static final OntClass Prefix = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#Prefix" );
    
    public static final OntClass Probability = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#Probability" );
    
    public static final OntClass ProductDimension = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#ProductDimension" );
    
    /** <p>ProdU = U1 * U2 [... * Ui], where ProdU product unit is derived from multiplying 
     *  units Ui.</p>
     */
    public static final OntClass ProductUnit = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#ProductUnit" );
    
    public static final OntClass RatioDimension = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#RatioDimension" );
    
    /** <p>Most measurement in the physical sciences and engineering is done on ratio 
     *  scales. Mass, length, time, plane angle, energy and electric charge are examples 
     *  of physical measures that are ratio scales. The scale type takes its name 
     *  from the fact that measurement is the estimation of the ratio between a magnitude 
     *  of a continuous quantity and a unit magnitude of the same kind (Michell, 1997, 
     *  1999). Informally, the distinguishing feature of a ratio scale is the possession 
     *  of a zero value. For example, the Kelvin temperature scale has a non-arbitrary 
     *  zero point of absolute zero, which is denoted 0K and is equal to -273.15 degrees 
     *  Celsius. This zero point is accuracy representing the particles that compose 
     *  matter at this temperature having zero kinetic energy. All statistical measures 
     *  can be used for a variable measured at the ratio level, as all necessary mathematical 
     *  operations are defined. The central tendency of a variable measured at the 
     *  ratio level can be represented by, in addition to its mode, its median, or 
     *  its arithmetic mean, also its geometric mean or harmonic mean. In addition 
     *  to the measures of statistical dispersion defined for interval variables, 
     *  such as range and standard deviation, for ratio variables one can also define 
     *  measures that require a ratio, such as studentized range or coefficient of 
     *  variation.</p>
     */
    public static final OntClass RatioLevel = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#RatioLevel" );
    
    /** <p>This kind of unit is a made-up unary type. The idea behind is that most of 
     *  the complex functions can be represented as a series of operations based on 
     *  regular expressions. RTU = Fforward(U) U = Finverse(RTU)</p>
     */
    public static final OntClass RegexpTransformedUnit = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#RegexpTransformedUnit" );
    
    public static final OntClass Temperature = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#Temperature" );
    
    public static final OntClass TimeInterval = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#TimeInterval" );
    
    /** <p>Unary unit is a derivative of a single unit.</p> */
    public static final OntClass UnaryUnit = m_model.createClass( "http://open-multinet.info/ontology/omn-monitoring-unit#UnaryUnit" );
    
    public static final Individual Byte = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#Byte", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual Bytepersecond = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#Bytepersecond", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual Gibi = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#Gibi", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual Kibi = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#Kibi", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual Mebi = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#Mebi", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual Tebi = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#Tebi", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual bit = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#bit", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual bitpersecond = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#bitpersecond", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual celsius = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#celsius", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual day = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#day", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual deco = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#deco", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual dozen = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#dozen", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual fraction = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#fraction", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual giga = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#giga", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual hecto = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#hecto", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual hour = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#hour", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual ipv4dotted = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#ipv4dotted", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual ipv4int = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#ipv4int", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual ipv6dotted = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#ipv6dotted", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual ipv6int = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#ipv6int", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual kelvin = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#kelvin", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual kilo = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#kilo", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual mega = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#mega", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual micro = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#micro", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual milli = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#milli", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual minute = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#minute", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual month = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#month", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual nano = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#nano", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual percent = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#percent", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual permil = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#permil", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual persecond = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#persecond", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual pico = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#pico", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual piece = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#piece", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual radian = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#radian", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual second = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#second", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual tera = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#tera", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual unitless = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#unitless", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual unixtimestamp = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#unixtimestamp", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual week = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#week", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
    public static final Individual year = m_model.createIndividual( "http://open-multinet.info/ontology/omn-monitoring-unit#year", m_model.createClass( "http://www.w3.org/2002/07/owl#NamedIndividual" ) );
    
}
