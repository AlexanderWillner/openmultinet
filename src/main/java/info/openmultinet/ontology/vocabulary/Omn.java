/* CVS $Id: $ */
package info.openmultinet.ontology.vocabulary; 
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.ontology.*;
 
/**
 * Vocabulary definitions from file:/Users/robynloughnane/git/omnnew/playground-rspecs-ontology/omnlib/ontologies/omn.ttl 
 * @author Auto-generated by schemagen on 01 Sep 2015 12:45 
 */
public class Omn {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    private static OntModel m_model = ModelFactory.createOntologyModel( OntModelSpec.OWL_MEM, null );
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://open-multinet.info/ontology/omn#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** <p>The ontology's owl:versionInfo as a string</p> */
    public static final String VERSION_INFO = "2015-04-27";
    
    /** <p>determines the resource from which this resource can be adapted from - e.g. 
     *  from an Ethernet to a FDDI port.</p>
     */
    public static final ObjectProperty adaptableFrom = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#adaptableFrom" );
    
    /** <p>determines to which resource this resource can adapts to - e.g. from an Ethernet 
     *  to a FDDI port.</p>
     */
    public static final ObjectProperty adaptableTo = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#adaptableTo" );
    
    /** <p>determines from which resource this resource adapts - e.g. from an Ethernet 
     *  to a FDDI port.</p>
     */
    public static final ObjectProperty adaptsFrom = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#adaptsFrom" );
    
    /** <p>determines to which resource this resource adapts - e.g. from an Ethernet 
     *  to a FDDI port.</p>
     */
    public static final ObjectProperty adaptsTo = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#adaptsTo" );
    
    /** <p>claims dependency</p> */
    public static final ObjectProperty dependsOn = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#dependsOn" );
    
    /** <p>claims dependency</p> */
    public static final ObjectProperty fromDependency = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#fromDependency" );
    
    /** <p>link to a general attribute of the resource - e.g. to a ReadOnly class</p> */
    public static final ObjectProperty hasAttribute = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#hasAttribute" );
    
    /** <p>component of the resource - e.g. a CPU</p> */
    public static final ObjectProperty hasComponent = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#hasComponent" );
    
    /** <p>a group that is related to this resource - e.g. a reserved topology within 
     *  an infrastructure</p>
     */
    public static final ObjectProperty hasGroup = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#hasGroup" );
    
    /** <p>the reservation details of a resource - e.g. an immediate reservation for 
     *  3 hours</p>
     */
    public static final ObjectProperty hasReservation = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#hasReservation" );
    
    /** <p>a resource that this resource contains - e.g. a node within a reserved topology</p> */
    public static final ObjectProperty hasResource = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#hasResource" );
    
    /** <p>a service that this resource contains - e.g. a Hadoop instance within a reserved 
     *  topology</p>
     */
    public static final ObjectProperty hasService = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#hasService" );
    
    /** <p>a general attribute of a resource - e.g. to a ReadOnly class</p> */
    public static final ObjectProperty isAttributeOf = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#isAttributeOf" );
    
    /** <p>is component of a resource - e.g. a CPU in a PC</p> */
    public static final ObjectProperty isComponentOf = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#isComponentOf" );
    
    /** <p>a group that is related to a resource - e.g. a reserved topology within an 
     *  infrastructure</p>
     */
    public static final ObjectProperty isGroupOf = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#isGroupOf" );
    
    /** <p>the reservation details of a resource - e.g. an immediate reservation for 
     *  3 hours</p>
     */
    public static final ObjectProperty isReservationOf = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#isReservationOf" );
    
    /** <p>a resource that another resource contains - e.g. a node within a reserved 
     *  topology</p>
     */
    public static final ObjectProperty isResourceOf = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#isResourceOf" );
    
    /** <p>a service of a resource - e.g. a Hadoop instance within a reserved topology</p> */
    public static final ObjectProperty isServiceOf = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#isServiceOf" );
    
    /** <p>claims a general dependency</p> */
    public static final ObjectProperty relatesTo = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#relatesTo" );
    
    /** <p>claims dependency</p> */
    public static final ObjectProperty toDependency = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#toDependency" );
    
    /** <p>within environment</p> */
    public static final ObjectProperty withinEnvironment = m_model.createObjectProperty( "http://open-multinet.info/ontology/omn#withinEnvironment" );
    
    /** <p>The URL of the API of a service</p> */
    public static final DatatypeProperty hasEndpoint = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn#hasEndpoint" );
    
    /** <p>information/attribute that is not writable</p> */
    public static final DatatypeProperty isReadonly = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn#isReadonly" );
    
    /** <p>represents the sequence number</p> */
    public static final DatatypeProperty sequenceNumber = m_model.createDatatypeProperty( "http://open-multinet.info/ontology/omn#sequenceNumber" );
    
    /** <p>Examples: Monitoring information, Color attributes, Reservation information, 
     *  QoS, SLAs, Location, Configuration, ...Describes the attributes of an omn:Group, 
     *  omn:Resource, omn:Service or omn:Component in more detail</p>
     */
    public static final OntClass Attribute = m_model.createClass( "http://open-multinet.info/ontology/omn#Attribute" );
    
    /** <p>An Entity that is part of an omn:Resource or omn:Service. It does not need 
     *  to be an omn:Resource or an omn:Service itself.Examples: CPU, Sensor, Core, 
     *  Port, Image</p>
     */
    public static final OntClass Component = m_model.createClass( "http://open-multinet.info/ontology/omn#Component" );
    
    /** <p>Examples: application coloring (in GENI context), orchestration needs dependenciesHelps 
     *  to defines a directional relationship between omn:Resource, omn:Group, omn:Component 
     *  or omn:Service. It makes it possible to annotate the dependencies with additional 
     *  properties.</p>
     */
    public static final OntClass Dependency = m_model.createClass( "http://open-multinet.info/ontology/omn#Dependency" );
    
    /** <p>Examples: interference, concurrent virtual machines, concurrent traffic, temperature, 
     *  heat, ...The operating conditions under which a omn:Resource, omn:Group, omn:Service 
     *  is operating.</p>
     */
    public static final OntClass Environment = m_model.createClass( "http://open-multinet.info/ontology/omn#Environment" );
    
    /** <p>Examples: Bi-directional Link, ...A collection of omn:Resource, omn:Service 
     *  or omn:Group</p>
     */
    public static final OntClass Group = m_model.createClass( "http://open-multinet.info/ontology/omn#Group" );
    
    /** <p>Describes a place within a hierarchy a specific omn:Group, omn:Resource, omn:Service 
     *  or omn:Component can adapt to.Examples: In networking, an end-to-end connectivity 
     *  has to be on the same layer (path finding). For resources, it can describe 
     *  the capability to adapt to a virtualized version</p>
     */
    public static final OntClass Layer = m_model.createClass( "http://open-multinet.info/ontology/omn#Layer" );
    
    /** <p>A specification of a guaranteeExamples: (Earliest) Start and (lates) end time, 
     *  data volume, ...</p>
     */
    public static final OntClass Reservation = m_model.createClass( "http://open-multinet.info/ontology/omn#Reservation" );
    
    /** <p>Examples: Node, Link, People, ...An Entity that can be provisioned/controlled/measured 
     *  by APIs</p>
     */
    public static final OntClass Resource = m_model.createClass( "http://open-multinet.info/ontology/omn#Resource" );
    
    /** <p>An Entity that has an API/capability to use it, it may depend on an omn:ResourceExamples: 
     *  Aggregate Manager, Portal, Measurement Service, Hadoop, Broker, ...</p>
     */
    public static final OntClass Service = m_model.createClass( "http://open-multinet.info/ontology/omn#Service" );
    
    /** <p>Examples: Infrastructure, Reservation, Slice, ...A collection of omn:Resource, 
     *  omn:Service or omn:Group</p>
     */
    public static final OntClass Topology = m_model.createClass( "http://open-multinet.info/ontology/omn#Topology" );
    
}
